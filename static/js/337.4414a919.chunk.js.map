{"version":3,"file":"static/js/337.4414a919.chunk.js","mappings":"6QAEaA,EAAUC,EAAAA,GAAAA,IAAH,kEAKPC,EAASD,EAAAA,GAAAA,OAAH,gmBA2BNE,EAAQF,EAAAA,GAAAA,MAAH,+HAOLG,EAAWH,EAAAA,GAAAA,GAAH,uG,SC2BrB,EA9DmB,WACjB,IAAMI,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,SAc/B,OAZAC,EAAAA,EAAAA,YAAU,WACJF,IACFG,EAAAA,EAAAA,IAAkBH,GACfI,MAAK,SAAAT,GAAM,OAAIC,EAAUD,MACzBU,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZG,EAAAA,GAAAA,MAAY,kCAIjB,CAACT,KAGF,iCACE,iBACEU,aAAa,MACbC,SAAU,SAAAC,GACRA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OACbC,EAAQJ,EAAMG,OAAOE,YAAYD,MAEzB,KAAVA,GAKJjB,EAAgB,CAAEC,MAAOgB,IACzBF,EAAKI,SALHT,EAAAA,GAAAA,MAAY,gCARlB,UAgBE,4BACE,UAACtB,EAAD,YACE,SAACG,EAAD,CAAO6B,KAAK,OAAOC,KAAK,iBACxB,SAAC/B,EAAD,CAAQ8B,KAAK,SAAb,qBACA,SAAC,KAAD,YAIN,yBACGxB,IACC,0BACqB,IAAlBA,EAAO0B,QAAe,qDAAmC,KACzD1B,EAAO2B,KAAI,SAAAC,GAAK,OACf,SAAChC,EAAD,WACE,SAAC,KAAD,CAAMiC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMnC,GAAhD,SACG+B,EAAMK,kBAFIL,EAAME,iB,0MCrDnCI,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAA4CC,EAA5C,+BAAkD,GAAlD,SACyBH,IAAAA,IAAUG,GADnC,cACQC,EADR,OAEQC,EAAOD,EAASC,KAAKC,QAF7B,kBAGSD,GAHT,mEAMO,SAASE,IACd,OAAOL,EAA6B,+BAAD,OAAgCD,IAG9D,SAAS3B,EAAkBkC,GAChC,OAAON,EAA6B,yBAAD,OACRD,EADQ,kBACKO,IAInC,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACcV,IAAAA,IAAA,iBAAoBU,EAApB,oBAAuCT,IADrD,cACCU,EADD,yBAEEA,EAAKN,MAFP,kEAKA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAgCF,GAAhC,yFACkBV,IAAAA,IAAA,gBAAmBU,EAAnB,4BAA8CT,IADhE,cACCG,EADD,OAECS,EAAST,EAASC,KAAKS,KAFxB,kBAGED,GAHF,kEAMA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAiCL,GAAjC,yFACkBV,IAAAA,IAAA,gBAAmBU,EAAnB,4BAA8CT,IADhE,cACCG,EADD,OAECY,EAAWZ,EAASC,KAAKC,QAF1B,kBAGEU,GAHF","sources":["components/MoviesPage/MoviesPage.styled.jsx","components/MoviesPage/MoviesPage.jsx","services/fetchMovies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n`;\n\nexport const Button = styled.button`\n  display: inline-block;\n  position: relative;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  border-left-width: 0;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  text-align: center;\n  vertical-align: middle;\n  cursor: pointer;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  background-color: #eee;\n  border: 1px solid #bdbdbd;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  border-radius: 0.25rem;\n  transition: background-color 0.15s ease-in-out;\n\n  &:hover {\n    background-color: #bdbdbd;\n  }\n`;\n\nexport const Input = styled.input`\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  position: relative;\n  z-index: 2;\n`;\n\nexport const ListItem = styled.li`\n  padding: 5px;\n\n  &:nth-child(even) {\n    background-color: #d6d6d6;\n  }\n`;\n","import toast, { Toaster } from 'react-hot-toast';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieByQuery } from 'services/fetchMovies';\nimport { Wrapper, Button, Input, ListItem } from './MoviesPage.styled';\n\nconst MoviesPage = () => {\n  const location = useLocation();\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (query) {\n      fetchMovieByQuery(query)\n        .then(movies => setMovies(movies))\n        .catch(error => {\n          console.log(error);\n          toast.error('Sorry. Movie is not found');\n        });\n      return;\n    }\n  }, [query]);\n\n  return (\n    <>\n      <form\n        autoComplete=\"off\"\n        onSubmit={event => {\n          event.preventDefault();\n          const form = event.target;\n          const value = event.target.searchField.value;\n\n          if (value === '') {\n            toast.error('Please enter a search query');\n            return;\n          }\n\n          setSearchParams({ query: value });\n          form.reset();\n        }}\n      >\n        <label>\n          <Wrapper>\n            <Input type=\"text\" name=\"searchField\" />\n            <Button type=\"submit\">Search</Button>\n            <Toaster />\n          </Wrapper>\n        </label>\n      </form>\n      <div>\n        {movies && (\n          <ul>\n            {movies.length === 0 ? <p>Sorry. Movie is not found</p> : null}\n            {movies.map(movie => (\n              <ListItem key={movie.id}>\n                <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                  {movie.original_title}\n                </Link>\n              </ListItem>\n            ))}\n          </ul>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = '3f98aefed4f412e17fc5cbf8a78c872a';\n\nasync function fetchMoviesWithErrorHandling(url = '') {\n  const response = await axios.get(url);\n  const data = response.data.results;\n  return data;\n}\n\nexport function fetchTrendingMovies() {\n  return fetchMoviesWithErrorHandling(`/trending/movie/day?api_key=${KEY}`);\n}\n\nexport function fetchMovieByQuery(searchQuery) {\n  return fetchMoviesWithErrorHandling(\n    `/search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n}\n\nexport async function fetchMovieById(movieId) {\n  const item = await axios.get(`/movie/${movieId}?api_key=${KEY}`);\n  return item.data;\n}\n\nexport async function fetchMovieActors(movieId) {\n  const response = await axios.get(`movie/${movieId}/credits?api_key=${KEY}`);\n  const actors = response.data.cast;\n  return actors;\n}\n\nexport async function fetchMovieReviews(movieId) {\n  const response = await axios.get(`movie/${movieId}/reviews?api_key=${KEY}`);\n  const reviewes = response.data.results;\n  return reviewes;\n}\n"],"names":["Wrapper","styled","Button","Input","ListItem","location","useLocation","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMovieByQuery","then","catch","error","console","log","toast","autoComplete","onSubmit","event","preventDefault","form","target","value","searchField","reset","type","name","length","map","movie","to","id","state","from","original_title","axios","KEY","fetchMoviesWithErrorHandling","url","response","data","results","fetchTrendingMovies","searchQuery","fetchMovieById","movieId","item","fetchMovieActors","actors","cast","fetchMovieReviews","reviewes"],"sourceRoot":""}